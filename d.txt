```// App State
const state = {
    userId: null,
    userEmail: null,
    balance: 0,
    orders: [],
    ticker: 'BTCUSDT',
    amount: '',
    leverage: 1,
    chart: 'BTCUSDT',
    isRegistering: false,
    loading: false
};

// DOM Elements
const authScreen = document.getElementById('auth-screen');
const mainApp = document.getElementById('main-app');
const loginTab = document.getElementById('login-tab');
const registerTab = document.getElementById('register-tab');
const authForm = document.getElementById('auth-form');
const emailInput = document.getElementById('email');
const passwordInput = document.getElementById('password');
const authSubmit = document.getElementById('auth-submit');
const errorMessage = document.getElementById('error-message');
const userEmailDisplay = document.getElementById('user-email');
const balanceDisplay = document.getElementById('balance-display');
const logoutBtn = document.getElementById('logout-btn');
const tickerSelect = document.getElementById('ticker-select');
const amountInput = document.getElementById('amount-input');
const leverageSelect = document.getElementById('leverage-select');
const buyBtn = document.getElementById('buy-btn');
const sellBtn = document.getElementById('sell-btn');
const positionSize = document.getElementById('position-size');
const ordersTable = document.getElementById('orders-table');
const depositBtn = document.getElementById('deposit-btn');
const depositModal = document.getElementById('deposit-modal');
const depositAmount = document.getElementById('deposit-amount');
const depositCancel = document.getElementById('deposit-cancel');
const depositConfirm = document.getElementById('deposit-confirm');

// Initialize app
function init() {
    const savedId = localStorage.getItem('userId');
    const savedEmail = localStorage.getItem('userEmail');

    if (savedId && savedEmail) {
        state.userId = savedId;
        state.userEmail = savedEmail;
        showMainApp();
        fetchBalance(savedId);
        fetchOrders(savedId);
    } else {
        showAuthScreen();
    }

    setupEventListeners();
}

// Event Listeners
function setupEventListeners() {
    // Auth tabs
    loginTab.addEventListener('click', () => {
        state.isRegistering = false;
        updateAuthTabs();
    });

    registerTab.addEventListener('click', () => {
        state.isRegistering = true;
        updateAuthTabs();
    });

    // Auth form
    authForm.addEventListener('submit', (e) => {
        e.preventDefault();
        state.isRegistering ? handleRegister() : handleLogin();
    });

    // Logout
    logoutBtn.addEventListener('click', handleLogout);

    // Trading
    tickerSelect.addEventListener('change', (e) => {
        state.ticker = e.target.value;
        initChart();
        fetchOrders(state.userId);
    });

    amountInput.addEventListener('input', (e) => {
        state.amount = e.target.value;
        updatePositionSize();
    });

    leverageSelect.addEventListener('change', (e) => {
        state.leverage = e.target.value;
        updatePositionSize();
    });

    buyBtn.addEventListener('click', () => openOrder('buy'));
    sellBtn.addEventListener('click', () => openOrder('sell'));

    // Deposit
    depositBtn.addEventListener('click', () => {
        depositModal.classList.remove('hidden');
    });

    depositCancel.addEventListener('click', () => {
        depositModal.classList.add('hidden');
        depositAmount.value = '';
    });

    depositConfirm.addEventListener('click', handleDeposit);
}

// UI Updates
function updateAuthTabs() {
    if (state.isRegistering) {
        loginTab.classList.remove('border-orange-500', 'text-orange-500');
        loginTab.classList.add('text-gray-400');
        registerTab.classList.add('border-orange-500', 'text-orange-500');
        registerTab.classList.remove('text-gray-400');
        authSubmit.textContent = 'Создать аккаунт';
    } else {
        registerTab.classList.remove('border-orange-500', 'text-orange-500');
        registerTab.classList.add('text-gray-400');
        loginTab.classList.add('border-orange-500', 'text-orange-500');
        loginTab.classList.remove('text-gray-400');
        authSubmit.textContent = 'Войти';
    }
}

function showMainApp() {
    authScreen.style.display = 'none';
    mainApp.style.display = 'block';
    userEmailDisplay.textContent = state.userEmail;
    initChart();
}

function showAuthScreen() {
    mainApp.style.display = 'none';
    authScreen.style.display = 'flex';
}

function updatePositionSize() {
    const amount = parseFloat(state.amount) || 0;
    const leverage = parseFloat(state.leverage) || 1;
    positionSize.textContent = '$' + (amount * leverage).toFixed(2);
}

function showError(message) {
    errorMessage.textContent = message;
    errorMessage.classList.remove('hidden');
}

function hideError() {
    errorMessage.classList.add('hidden');
}

function updateOrdersTable() {
    if (state.orders.length === 0) {
        ordersTable.innerHTML = `
      <tr>
        <td colspan="6" class="px-6 py-8 text-center text-gray-500">
          Нет открытых сделок по выбранной паре
        </td>
      </tr>
    `;
        return;
    }

    ordersTable.innerHTML = state.orders.map(order => `
    <tr class="hover:bg-gray-50">
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
        ${new Date(order.created_at).toLocaleString('ru-RU')}
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
        order.order_type === 'buy' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
    }">
          ${order.order_type === 'buy' ? 'Покупка' : 'Продажа'}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
        $${parseFloat(order.margin).toFixed(2)}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">
        ${order.leverage}x
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
        order.status === 'open' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
    }">
          ${order.status === 'open' ? 'Активен' : 'Закрыт'}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        ${order.status === 'open' ? `
          <button
            onclick="closeOrder('${order.order_id}')"
            class="text-orange-600 hover:text-orange-800 transition"
          >
            Закрыть
          </button>
        ` : ''}
      </td>
    </tr>
  `).join('');
}

// Chart Initialization
function initChart() {
    if (window.chart) {
        window.chart.remove();
    }

    const chartContainer = document.getElementById('chart');
    chartContainer.innerHTML = '';

    window.chart = new TradingView.widget({
        container_id: 'chart',
        width: '100%',
        height: 500,
        symbol: `BINANCE:${state.ticker}`,
        interval: 'D',
        timezone: 'Etc/UTC',
        theme: 'light',
        style: '1',
        locale: 'ru',
        toolbar_bg: '#f1f3f6',
        allow_symbol_change: true,
        studies: ['MASimple@tv-basicstudies']
    });
}

// API Functions
async function handleLogin() {
    state.loading = true;
    hideError();

    try {
        const res = await fetch('http://localhost:8080/user/api/user/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                email: emailInput.value,
                password: passwordInput.value
            })
        });

        const data = await res.json();

        if (res.status === 200) {
            state.userId = data.id;
            state.userEmail = data.email;
            localStorage.setItem('userId', data.id);
            localStorage.setItem('userEmail', data.email);
            showMainApp();
            fetchBalance(data.id);
            fetchOrders(data.id);
        } else {
            showError(data.error || 'Ошибка авторизации');
        }
    } catch (err) {
        showError('Ошибка сервера. Попробуйте позже.');
    } finally {
        state.loading = false;
    }
}

async function handleRegister() {
    state.loading = true;
    hideError();

    try {
        console.log("http://localhost:8080/user/api/user/register")
        const res = await fetch('http://localhost:8080/user/api/user/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                email: emailInput.value,
                password: passwordInput.value
            })
        });

        const data = await res.json();

        if (res.status === 201) {
            state.userId = data.id;
            state.userEmail = emailInput.value;
            localStorage.setItem('userId', data.id);
            localStorage.setItem('userEmail', emailInput.value);
            showMainApp();
            fetchBalance(data.id);
        } else {
            showError(data.error || 'Ошибка регистрации');
        }
    } catch (err) {
        showError('Ошибка сервера. Попробуйте позже.');
    } finally {
        state.loading = false;
    }
}

function handleLogout() {
    localStorage.removeItem('userId');
    localStorage.removeItem('userEmail');
    state.userId = null;
    state.userEmail = null;
    state.balance = 0;
    state.orders = [];
    showAuthScreen();
}

async function fetchBalance(id) {
    try {
        console.log("http://localhost:8080/user/api/user/balance")
        const res = await fetch('http://localhost:8080/user/api/user/balance', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: +id })
        });

        const data = await res.json();
        state.balance = parseFloat(data.balance);
        balanceDisplay.textContent = '$' + state.balance.toFixed(2);
    } catch (err) {
        console.error('Error fetching balance:', err);
    }
}

async function fetchOrders(id) {
    try {
        const res = await fetch('http://localhost:8080/trade/api/trade/orders', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: +id })
        });

        const { orders } = await res.json();
        state.orders = orders.filter(o => o.ticker === state.ticker);
        updateOrdersTable();
    } catch (err) {
        console.error('Error fetching orders:', err);
    }
}

async function openOrder(type) {
    if (!state.amount || parseFloat(state.amount) <= 0) {
        alert('Введите корректную сумму');
        return;
    }

    state.loading = true;
    try {
        await fetch('http://localhost:8080/trade/api/trade/open', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: +state.userId,
                ticker: state.ticker,
                order_type: type,
                margin: parseFloat(state.amount),
                leverage: +state.leverage
            })
        });

        amountInput.value = '';
        state.amount = '';
        updatePositionSize();
        fetchBalance(state.userId);
        fetchOrders(state.userId);
    } catch (err) {
        console.error('Error opening order:', err);
    } finally {
        state.loading = false;
    }
}

async function closeOrder(orderId) {
    state.loading = true;
    try {
        await fetch('http://localhost:8080/trade/api/trade/close', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                order_id: orderId,
                ticker: state.ticker
            })
        });

        fetchBalance(state.userId);
        fetchOrders(state.userId);
    } catch (err) {
        console.error('Error closing order:', err);
    } finally {
        state.loading = false;
    }
}

async function handleDeposit() {
    const amount = depositAmount.value;
    if (!amount || parseFloat(amount) <= 0) {
        alert('Введите корректную сумму');
        return;
    }

    state.loading = true;
    try {
        await fetch('http://localhost:8080/user/api/user/balance/increase', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                id: +state.userId,
                amount: parseFloat(amount)
            })
        });

        depositAmount.value = '';
        depositModal.classList.add('hidden');
        fetchBalance(state.userId);
    } catch (err) {
        console.error('Error depositing funds:', err);
    } finally {
        state.loading = false;
    }
}

// Make closeOrder available globally for event handlers
window.closeOrder = closeOrder;

// Initialize the app
init();